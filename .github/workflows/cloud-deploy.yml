# Build docker image and deploy to google cloud run
name: cloud_deploy

on:
  push:
    branches:
      - feat/deploy-gh-action
env:
  REGISTRY: europe-west1-docker.pkg.dev

  REGION: europe-west1

  PROJECT_ID: ${{ secrets.GCP_PROJECT }}

  SERVICE_NAME: opencdms-components-api

  REGISTRY_PATH: ${{ secrets.GCP_PROJECT }}/opencdms-components-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    # https://github.com/docker/build-push-action/issues/171
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

        # TODO - could gcloud auth and pass as token

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key_base64
          password: ${{ secrets.GCP_SA_KEY_B64 }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_PATH }}/${{ env.SERVICE_NAME }}

      - name: Build
        id: build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}, mode=max

      # authenticate to google cloud
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json
      # https://cloud.google.com/artifact-registry/docs/access-control

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: ${{secrets.GCP_SA_KEY_B64}}
          token_format: "access_token"

      # Deploy to google cloud
      # https://cloud.google.com/run/docs/reference/iam/roles#additional-configuration
      # requires additional "service account user" and "cloud run admin" roles
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE_NAME }}
          # https://githubhot.com/repo/docker/build-push-action/issues/554
          image: ${{ fromJSON(steps.build.outputs.Metadata.image.name)['image.name']}}
          region: ${{ env.REGION }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: idems/opencdms-components-api

      # authenticate to google cloud
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json
      # https://cloud.google.com/artifact-registry/docs/access-control

      # - id: "auth"
      #   uses: "google-github-actions/auth@v0"
      #   with:
      #     credentials_json: ${{secrets.GCP_SA_KEY_B64}}
      #     token_format: "access_token"

      # - name: Authorize Docker push
      #   run: gcloud auth configure-docker
      # Authenticate to google cloud
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json
      # https://github.com/docker/login-action#google-container-registry-gcr

      # This example runs "docker login" directly to Artifact Registry.
      # - run: |
      #     echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://${{env.REGION}}-docker.pkg.dev
